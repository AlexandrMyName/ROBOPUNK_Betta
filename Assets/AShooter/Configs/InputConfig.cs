//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/AShooter/Configs/InputConfig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputConfig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputConfig()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputConfig"",
    ""maps"": [
        {
            ""name"": ""Direction"",
            ""id"": ""995d3d3b-353c-4494-9738-ce689d207ff4"",
            ""actions"": [
                {
                    ""name"": ""Vector"",
                    ""type"": ""Value"",
                    ""id"": ""a721c2c0-69db-4784-a324-d63690e4f0b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""81960913-3cdb-483c-a1b2-33a6caab1ad2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vector"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1db306c5-3996-4d23-98ab-6b4ad1c52a04"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5713af12-1d50-48db-8970-858b90af9358"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64e12b83-dc34-4836-98b6-2a385751d6b0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dda9b831-095f-4477-b787-854a4209938c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c71b83b-7770-451e-abca-e808563e0e4c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8434371b-e3bf-4112-95bf-333a180bff62"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f35f12d0-181a-4d7c-8707-2f6f583275fa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cf86fb3d-be11-425f-8873-b86480d4a80f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Move"",
            ""bindingGroup"": ""Move"",
            ""devices"": []
        }
    ]
}");
        // Direction
        m_Direction = asset.FindActionMap("Direction", throwIfNotFound: true);
        m_Direction_Vector = m_Direction.FindAction("Vector", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Direction
    private readonly InputActionMap m_Direction;
    private List<IDirectionActions> m_DirectionActionsCallbackInterfaces = new List<IDirectionActions>();
    private readonly InputAction m_Direction_Vector;
    public struct DirectionActions
    {
        private @InputConfig m_Wrapper;
        public DirectionActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Vector => m_Wrapper.m_Direction_Vector;
        public InputActionMap Get() { return m_Wrapper.m_Direction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DirectionActions set) { return set.Get(); }
        public void AddCallbacks(IDirectionActions instance)
        {
            if (instance == null || m_Wrapper.m_DirectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DirectionActionsCallbackInterfaces.Add(instance);
            @Vector.started += instance.OnVector;
            @Vector.performed += instance.OnVector;
            @Vector.canceled += instance.OnVector;
        }

        private void UnregisterCallbacks(IDirectionActions instance)
        {
            @Vector.started -= instance.OnVector;
            @Vector.performed -= instance.OnVector;
            @Vector.canceled -= instance.OnVector;
        }

        public void RemoveCallbacks(IDirectionActions instance)
        {
            if (m_Wrapper.m_DirectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDirectionActions instance)
        {
            foreach (var item in m_Wrapper.m_DirectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DirectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DirectionActions @Direction => new DirectionActions(this);
    private int m_MoveSchemeIndex = -1;
    public InputControlScheme MoveScheme
    {
        get
        {
            if (m_MoveSchemeIndex == -1) m_MoveSchemeIndex = asset.FindControlSchemeIndex("Move");
            return asset.controlSchemes[m_MoveSchemeIndex];
        }
    }
    public interface IDirectionActions
    {
        void OnVector(InputAction.CallbackContext context);
    }
}
