//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/AShooter/Configs/InputConfig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputConfig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputConfig()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputConfig"",
    ""maps"": [
        {
            ""name"": ""Direction"",
            ""id"": ""995d3d3b-353c-4494-9738-ce689d207ff4"",
            ""actions"": [
                {
                    ""name"": ""Vector"",
                    ""type"": ""Value"",
                    ""id"": ""a721c2c0-69db-4784-a324-d63690e4f0b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""81960913-3cdb-483c-a1b2-33a6caab1ad2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vector"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1db306c5-3996-4d23-98ab-6b4ad1c52a04"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5713af12-1d50-48db-8970-858b90af9358"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64e12b83-dc34-4836-98b6-2a385751d6b0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dda9b831-095f-4477-b787-854a4209938c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c71b83b-7770-451e-abca-e808563e0e4c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8434371b-e3bf-4112-95bf-333a180bff62"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f35f12d0-181a-4d7c-8707-2f6f583275fa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cf86fb3d-be11-425f-8873-b86480d4a80f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Move"",
                    ""action"": ""Vector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""59c08737-b665-4522-99f7-8b6a397879ea"",
            ""actions"": [
                {
                    ""name"": ""LBM"",
                    ""type"": ""Button"",
                    ""id"": ""26385be9-ac3f-4abd-8746-44cec5edcf25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RBM"",
                    ""type"": ""Button"",
                    ""id"": ""44542e2d-2cc1-4b07-8f20-a18b112b0b2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1dae64bf-6594-4092-bfcc-562e29151efc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ead58ad4-b8d5-4bcd-b902-4f42f16e1c2d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon"",
            ""id"": ""6517b6c8-296d-467f-a262-3ff37301ebb5"",
            ""actions"": [
                {
                    ""name"": ""First"",
                    ""type"": ""Button"",
                    ""id"": ""d6803d3c-227e-4fc8-a4ec-bed054053335"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Second"",
                    ""type"": ""Button"",
                    ""id"": ""f93ccf9b-8d03-42a9-9f97-e643b1be0045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Third"",
                    ""type"": ""Button"",
                    ""id"": ""0f4f4647-be2c-4a61-8599-47f0a410143c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""64c6f63c-59b6-4697-bb10-4f63801a4290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37aa9c23-ad8b-44f2-a222-0ded29510d93"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""First"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34c7e6a2-2650-4bb3-b03a-aed4240ab27d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Second"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef28d29-775d-482f-8a2b-2f80238882af"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Third"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d0e7a7f-4eda-4f71-ae38-2b5a07377947"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ability"",
            ""id"": ""81445124-3b14-4fee-b886-45b500b3e14c"",
            ""actions"": [
                {
                    ""name"": ""Explosion"",
                    ""type"": ""Button"",
                    ""id"": ""7a8e010d-81bf-4be0-ba32-d5783b3b7f7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed7ce345-650b-4b26-a1dd-929d51de1fdc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explosion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dash"",
            ""id"": ""f9fdf20c-955b-4401-9269-ceb30e0a1860"",
            ""actions"": [
                {
                    ""name"": ""Key"",
                    ""type"": ""Button"",
                    ""id"": ""09202e61-24dc-4d22-87b8-4e1b7adad520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1cf3b8f-8479-4e44-91a1-4ed989df8917"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""ea8b427c-87cd-47c3-a933-b798d01b0956"",
            ""actions"": [
                {
                    ""name"": ""Key"",
                    ""type"": ""Button"",
                    ""id"": ""a7f4d511-e6e4-406d-9d8f-93956d9a8618"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98cff5fc-4b7a-4b5e-9027-cff2f991b435"",
                    ""path"": ""<Keyboard>/E"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""73f0feb1-989b-4b0c-897f-62da33e40ac3"",
            ""actions"": [
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""aa375a83-6e04-4737-b5f1-15acb53dc219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""984a655b-4a96-467a-be8a-8ae00ab24336"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MP3Player"",
            ""id"": ""51837825-1f0b-4e5f-b653-b7a89f68d2f7"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""1f436587-fdd8-44c8-92dc-e806f2b885d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""effb75f4-57ad-4efe-8395-64091796991d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Move"",
            ""bindingGroup"": ""Move"",
            ""devices"": []
        }
    ]
}");
        // Direction
        m_Direction = asset.FindActionMap("Direction", throwIfNotFound: true);
        m_Direction_Vector = m_Direction.FindAction("Vector", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_LBM = m_Mouse.FindAction("LBM", throwIfNotFound: true);
        m_Mouse_RBM = m_Mouse.FindAction("RBM", throwIfNotFound: true);
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_First = m_Weapon.FindAction("First", throwIfNotFound: true);
        m_Weapon_Second = m_Weapon.FindAction("Second", throwIfNotFound: true);
        m_Weapon_Third = m_Weapon.FindAction("Third", throwIfNotFound: true);
        m_Weapon_Melee = m_Weapon.FindAction("Melee", throwIfNotFound: true);
        // Ability
        m_Ability = asset.FindActionMap("Ability", throwIfNotFound: true);
        m_Ability_Explosion = m_Ability.FindAction("Explosion", throwIfNotFound: true);
        // Dash
        m_Dash = asset.FindActionMap("Dash", throwIfNotFound: true);
        m_Dash_Key = m_Dash.FindAction("Key", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Key = m_Interact.FindAction("Key", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_PauseMenu = m_Menu.FindAction("PauseMenu", throwIfNotFound: true);
        // MP3Player
        m_MP3Player = asset.FindActionMap("MP3Player", throwIfNotFound: true);
        m_MP3Player_Play = m_MP3Player.FindAction("Play", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Direction
    private readonly InputActionMap m_Direction;
    private List<IDirectionActions> m_DirectionActionsCallbackInterfaces = new List<IDirectionActions>();
    private readonly InputAction m_Direction_Vector;
    public struct DirectionActions
    {
        private @InputConfig m_Wrapper;
        public DirectionActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Vector => m_Wrapper.m_Direction_Vector;
        public InputActionMap Get() { return m_Wrapper.m_Direction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DirectionActions set) { return set.Get(); }
        public void AddCallbacks(IDirectionActions instance)
        {
            if (instance == null || m_Wrapper.m_DirectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DirectionActionsCallbackInterfaces.Add(instance);
            @Vector.started += instance.OnVector;
            @Vector.performed += instance.OnVector;
            @Vector.canceled += instance.OnVector;
        }

        private void UnregisterCallbacks(IDirectionActions instance)
        {
            @Vector.started -= instance.OnVector;
            @Vector.performed -= instance.OnVector;
            @Vector.canceled -= instance.OnVector;
        }

        public void RemoveCallbacks(IDirectionActions instance)
        {
            if (m_Wrapper.m_DirectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDirectionActions instance)
        {
            foreach (var item in m_Wrapper.m_DirectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DirectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DirectionActions @Direction => new DirectionActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_LBM;
    private readonly InputAction m_Mouse_RBM;
    public struct MouseActions
    {
        private @InputConfig m_Wrapper;
        public MouseActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @LBM => m_Wrapper.m_Mouse_LBM;
        public InputAction @RBM => m_Wrapper.m_Mouse_RBM;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @LBM.started += instance.OnLBM;
            @LBM.performed += instance.OnLBM;
            @LBM.canceled += instance.OnLBM;
            @RBM.started += instance.OnRBM;
            @RBM.performed += instance.OnRBM;
            @RBM.canceled += instance.OnRBM;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @LBM.started -= instance.OnLBM;
            @LBM.performed -= instance.OnLBM;
            @LBM.canceled -= instance.OnLBM;
            @RBM.started -= instance.OnRBM;
            @RBM.performed -= instance.OnRBM;
            @RBM.canceled -= instance.OnRBM;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_First;
    private readonly InputAction m_Weapon_Second;
    private readonly InputAction m_Weapon_Third;
    private readonly InputAction m_Weapon_Melee;
    public struct WeaponActions
    {
        private @InputConfig m_Wrapper;
        public WeaponActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @First => m_Wrapper.m_Weapon_First;
        public InputAction @Second => m_Wrapper.m_Weapon_Second;
        public InputAction @Third => m_Wrapper.m_Weapon_Third;
        public InputAction @Melee => m_Wrapper.m_Weapon_Melee;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @First.started += instance.OnFirst;
            @First.performed += instance.OnFirst;
            @First.canceled += instance.OnFirst;
            @Second.started += instance.OnSecond;
            @Second.performed += instance.OnSecond;
            @Second.canceled += instance.OnSecond;
            @Third.started += instance.OnThird;
            @Third.performed += instance.OnThird;
            @Third.canceled += instance.OnThird;
            @Melee.started += instance.OnMelee;
            @Melee.performed += instance.OnMelee;
            @Melee.canceled += instance.OnMelee;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @First.started -= instance.OnFirst;
            @First.performed -= instance.OnFirst;
            @First.canceled -= instance.OnFirst;
            @Second.started -= instance.OnSecond;
            @Second.performed -= instance.OnSecond;
            @Second.canceled -= instance.OnSecond;
            @Third.started -= instance.OnThird;
            @Third.performed -= instance.OnThird;
            @Third.canceled -= instance.OnThird;
            @Melee.started -= instance.OnMelee;
            @Melee.performed -= instance.OnMelee;
            @Melee.canceled -= instance.OnMelee;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);

    // Ability
    private readonly InputActionMap m_Ability;
    private List<IAbilityActions> m_AbilityActionsCallbackInterfaces = new List<IAbilityActions>();
    private readonly InputAction m_Ability_Explosion;
    public struct AbilityActions
    {
        private @InputConfig m_Wrapper;
        public AbilityActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Explosion => m_Wrapper.m_Ability_Explosion;
        public InputActionMap Get() { return m_Wrapper.m_Ability; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilityActions set) { return set.Get(); }
        public void AddCallbacks(IAbilityActions instance)
        {
            if (instance == null || m_Wrapper.m_AbilityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Add(instance);
            @Explosion.started += instance.OnExplosion;
            @Explosion.performed += instance.OnExplosion;
            @Explosion.canceled += instance.OnExplosion;
        }

        private void UnregisterCallbacks(IAbilityActions instance)
        {
            @Explosion.started -= instance.OnExplosion;
            @Explosion.performed -= instance.OnExplosion;
            @Explosion.canceled -= instance.OnExplosion;
        }

        public void RemoveCallbacks(IAbilityActions instance)
        {
            if (m_Wrapper.m_AbilityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbilityActions instance)
        {
            foreach (var item in m_Wrapper.m_AbilityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbilityActions @Ability => new AbilityActions(this);

    // Dash
    private readonly InputActionMap m_Dash;
    private List<IDashActions> m_DashActionsCallbackInterfaces = new List<IDashActions>();
    private readonly InputAction m_Dash_Key;
    public struct DashActions
    {
        private @InputConfig m_Wrapper;
        public DashActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Key => m_Wrapper.m_Dash_Key;
        public InputActionMap Get() { return m_Wrapper.m_Dash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DashActions set) { return set.Get(); }
        public void AddCallbacks(IDashActions instance)
        {
            if (instance == null || m_Wrapper.m_DashActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DashActionsCallbackInterfaces.Add(instance);
            @Key.started += instance.OnKey;
            @Key.performed += instance.OnKey;
            @Key.canceled += instance.OnKey;
        }

        private void UnregisterCallbacks(IDashActions instance)
        {
            @Key.started -= instance.OnKey;
            @Key.performed -= instance.OnKey;
            @Key.canceled -= instance.OnKey;
        }

        public void RemoveCallbacks(IDashActions instance)
        {
            if (m_Wrapper.m_DashActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDashActions instance)
        {
            foreach (var item in m_Wrapper.m_DashActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DashActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DashActions @Dash => new DashActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_Key;
    public struct InteractActions
    {
        private @InputConfig m_Wrapper;
        public InteractActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Key => m_Wrapper.m_Interact_Key;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @Key.started += instance.OnKey;
            @Key.performed += instance.OnKey;
            @Key.canceled += instance.OnKey;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @Key.started -= instance.OnKey;
            @Key.performed -= instance.OnKey;
            @Key.canceled -= instance.OnKey;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_PauseMenu;
    public struct MenuActions
    {
        private @InputConfig m_Wrapper;
        public MenuActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseMenu => m_Wrapper.m_Menu_PauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // MP3Player
    private readonly InputActionMap m_MP3Player;
    private List<IMP3PlayerActions> m_MP3PlayerActionsCallbackInterfaces = new List<IMP3PlayerActions>();
    private readonly InputAction m_MP3Player_Play;
    public struct MP3PlayerActions
    {
        private @InputConfig m_Wrapper;
        public MP3PlayerActions(@InputConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_MP3Player_Play;
        public InputActionMap Get() { return m_Wrapper.m_MP3Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MP3PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IMP3PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MP3PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MP3PlayerActionsCallbackInterfaces.Add(instance);
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
        }

        private void UnregisterCallbacks(IMP3PlayerActions instance)
        {
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
        }

        public void RemoveCallbacks(IMP3PlayerActions instance)
        {
            if (m_Wrapper.m_MP3PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMP3PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MP3PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MP3PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MP3PlayerActions @MP3Player => new MP3PlayerActions(this);
    private int m_MoveSchemeIndex = -1;
    public InputControlScheme MoveScheme
    {
        get
        {
            if (m_MoveSchemeIndex == -1) m_MoveSchemeIndex = asset.FindControlSchemeIndex("Move");
            return asset.controlSchemes[m_MoveSchemeIndex];
        }
    }
    public interface IDirectionActions
    {
        void OnVector(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnLBM(InputAction.CallbackContext context);
        void OnRBM(InputAction.CallbackContext context);
    }
    public interface IWeaponActions
    {
        void OnFirst(InputAction.CallbackContext context);
        void OnSecond(InputAction.CallbackContext context);
        void OnThird(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
    }
    public interface IAbilityActions
    {
        void OnExplosion(InputAction.CallbackContext context);
    }
    public interface IDashActions
    {
        void OnKey(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnKey(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPauseMenu(InputAction.CallbackContext context);
    }
    public interface IMP3PlayerActions
    {
        void OnPlay(InputAction.CallbackContext context);
    }
}
